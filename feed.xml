<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Chapman's Blog</title>
    <description>A tech blog about all things bug bounty, security and development.
</description>
    <link>https://ajxchapman.github.io/</link>
    <atom:link href="https://ajxchapman.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 10 Jan 2021 17:19:19 -0600</pubDate>
    <lastBuildDate>Sun, 10 Jan 2021 17:19:19 -0600</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Kata Containers `hostPath` file write</title>
        <description>&lt;p&gt;&lt;strong&gt;Bugcrowd bug report to a Private Program:&lt;/strong&gt; Kata Containers was found to be vulnerable to an issue allowing Kata VMs to write to &lt;code class=&quot;highlighter-rouge&quot;&gt;hostPath&lt;/code&gt; mount points which should have been read only. This issue was fixed in the Kata Containers project and assigned CVE-2020-28914.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/bugreports/2020/11/30/bugcrowd-private-7bf77429-2b94-44ea-b6f9-c1fc59b2fd17.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/bugreports/2020/11/30/bugcrowd-private-7bf77429-2b94-44ea-b6f9-c1fc59b2fd17.html</guid>
        
        
        <category>bugreports</category>
        
      </item>
    
      <item>
        <title>Privileged Container Escape - Control Groups release_agent</title>
        <description>&lt;p&gt;I’ve recently been doing a lot of bug hunting in containerized environments, and one common theme has been escaping a container to execute code on the container host. In this post I’ll expand on a technique reported by &lt;a href=&quot;https://twitter.com/_fel1x&quot;&gt;Felix Wilhelm (@_fel1x)&lt;/a&gt; to escape a privileged container to execute arbitrary commands on the container host.&lt;/p&gt;

</description>
        <pubDate>Thu, 19 Nov 2020 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/containers/2020/11/19/privileged-container-escape.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/containers/2020/11/19/privileged-container-escape.html</guid>
        
        
        <category>containers</category>
        
      </item>
    
      <item>
        <title>GitLab - GitLab-Runner on Windows `DOCKER_AUTH_CONFIG` container host Command Injection</title>
        <description>&lt;p&gt;&lt;strong&gt;HackerOne bug report to GitLab:&lt;/strong&gt; GitLab-Runner, when running on Windows with a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; executor, is vulnerable to Command Injection via the &lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_AUTH_CONFIG&lt;/code&gt; build variable. Injected commands are executed on the container host, not within a Docker container, as such could compromise all future builds which are executed by the runner.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Nov 2020 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/bugreports/2020/11/04/hackerone-gitlab-955016.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/bugreports/2020/11/04/hackerone-gitlab-955016.html</guid>
        
        
        <category>bugreports</category>
        
      </item>
    
      <item>
        <title>Greenhouse.io - Debug information disclosure on oauth-redirector.services.greenhouse.io</title>
        <description>&lt;p&gt;&lt;strong&gt;HackerOne bug report to Greenhouse.io:&lt;/strong&gt; The configuration of the Sintra framework application hosted at &lt;code class=&quot;highlighter-rouge&quot;&gt;oauth-redirector.services.greenhouse.io&lt;/code&gt; exposes internal information when exceptions occur. The application is configured with the &lt;code class=&quot;highlighter-rouge&quot;&gt;show_exceptions&lt;/code&gt; setting which causes internal application configuration, environment variables and source code snippets to be exposed when exceptions occur.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Feb 2020 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/bugreports/2020/02/29/hackerone-greenhouseio-315205.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/bugreports/2020/02/29/hackerone-greenhouseio-315205.html</guid>
        
        
        <category>bugreports</category>
        
      </item>
    
      <item>
        <title>SEMrush - Ad Builder Display Ads Path Traversal</title>
        <description>&lt;p&gt;&lt;strong&gt;HackerOne bug report to SEMrush:&lt;/strong&gt; The Semrush Ad Builder for Display Ads is vulnerable to path traversal when extracting zip files and referencing images from the embedded &lt;code class=&quot;highlighter-rouge&quot;&gt;data.csv&lt;/code&gt; file.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Feb 2020 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/bugreports/2020/02/28/hackerone-semrush-316713.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/bugreports/2020/02/28/hackerone-semrush-316713.html</guid>
        
        
        <category>bugreports</category>
        
      </item>
    
      <item>
        <title>On Full-Time Bug Bounty Hunting</title>
        <description>&lt;p&gt;When I introduce myself to others in the IT Security industry as a full-time Bug Hunter getting paid through Bug Bounties, they often have many questions (when I do this to people outside the industry they look at me funny and fake reasons to excuse themselves). In this post I reflect on my experiences after 12 months bug hunting for my primary source of income, and try to answer some of the more common questions I receive.&lt;/p&gt;

</description>
        <pubDate>Mon, 10 Feb 2020 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/bugbounty/2020/02/10/on-full-time-bug-bounty-hunting.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/bugbounty/2020/02/10/on-full-time-bug-bounty-hunting.html</guid>
        
        
        <category>bugbounty</category>
        
      </item>
    
      <item>
        <title>WordPress - Wordpress unzip_file path traversal</title>
        <description>&lt;p&gt;&lt;strong&gt;HackerOne bug report to WordPress:&lt;/strong&gt; The Wordpress unzip_file function (https://codex.wordpress.org/Function_Reference/unzip_file) is vulnerable to path traversal when extracting zip files. Extracting untrusted zip files using this function this could lead to code execution through placing arbitrary PHP files in the DocumentRoot of the webserver.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jan 2020 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/bugreports/2020/01/30/hackerone-wordpress-205481.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/bugreports/2020/01/30/hackerone-wordpress-205481.html</guid>
        
        
        <category>bugreports</category>
        
      </item>
    
      <item>
        <title>Bug Hunting Year in Review - 2019</title>
        <description>&lt;p&gt;As I come to the end of my first year of full-time Bug Bounty Hunting in this post I share some statistics of the bug reports I’ve submitted during 2019.&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Jan 2020 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/bugbounty/2020/01/01/bug-hunting-year-in-review.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/bugbounty/2020/01/01/bug-hunting-year-in-review.html</guid>
        
        
        <category>bugbounty</category>
        
      </item>
    
      <item>
        <title>GitLab - GitLab::UrlBlocker validation bypass leading to full Server Side Request Forgery</title>
        <description>&lt;p&gt;&lt;strong&gt;HackerOne bug report to GitLab:&lt;/strong&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;GitLab::UrlBlocker&lt;/code&gt; IP address validation methods suffer from a Time of Check to Time of Use (ToCToU) vulnerability. The vulnerability occurs due to multiple DNS resolution requests performed before and after the checks. This issue allows a malicious authenticated user to send GET and POST HTTP requests to arbitrary hosts, including the localhost, cloud metadata services and the local network, and read the HTTP response.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Dec 2019 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/bugreports/2019/12/12/hackerone-gitlab-541169.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/bugreports/2019/12/12/hackerone-gitlab-541169.html</guid>
        
        
        <category>bugreports</category>
        
      </item>
    
      <item>
        <title>GitLab - Importing GitLab project archives can replace uploads of other users</title>
        <description>&lt;p&gt;&lt;strong&gt;HackerOne bug report to GitLab:&lt;/strong&gt; Importing a modified exported GitLab project archive can overwrite uploads for other users. If the &lt;code class=&quot;highlighter-rouge&quot;&gt;secret&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;file name&lt;/code&gt; of an upload are known (these can be easily identified for any uploads to public repositories), any user can import a new project which overwrites the served content of the upload with arbitrary content.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Dec 2019 00:00:00 -0600</pubDate>
        <link>https://ajxchapman.github.io/bugreports/2019/12/11/hackerone-gitlab-534794.html</link>
        <guid isPermaLink="true">https://ajxchapman.github.io/bugreports/2019/12/11/hackerone-gitlab-534794.html</guid>
        
        
        <category>bugreports</category>
        
      </item>
    
  </channel>
</rss>
